package postgres

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
)

// DBTX is an interface that allows working with both pgx.Tx and pgxpool.Pool
// This interface matches what sqlc expects for query execution
type DBTX interface {
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
}

// Querier is a generic interface for database queries
// This will be implemented by sqlc generated code
type Querier interface {
	// This interface is intentionally empty
	// It will be extended by the specific interfaces generated by sqlc
}

// Transaction represents a database transaction
// Used as a helper to work with sqlc generated code
type Transaction struct {
	tx pgx.Tx
}

// GetDB returns the appropriate database interface for the context
// If there's a transaction in the context, it returns that
// Otherwise it returns the connection pool
func GetDB(ctx context.Context, pool *pgxpool.Pool) DBTX {
	tx := GetTx(ctx)
	if tx != nil {
		return tx
	}
	return pool
}

// GetTx extracts a transaction from the context if one exists
func GetTx(ctx context.Context) pgx.Tx {
	if tx, ok := ctx.Value(txKey).(pgx.Tx); ok {
		return tx
	}
	return nil
}

// WithTx adds a transaction to the context
func WithTx(ctx context.Context, tx pgx.Tx) context.Context {
	return context.WithValue(ctx, txKey, tx)
}

// txKey is the context key for transactions
type txKeyType struct{}

var txKey = txKeyType{}

// Exec executes a SQL query
func (t *Transaction) Exec(ctx context.Context, query string, args ...interface{}) (pgconn.CommandTag, error) {
	return t.tx.Exec(ctx, query, args...)
}

// Query executes a query that returns rows
func (t *Transaction) Query(ctx context.Context, query string, args ...interface{}) (pgx.Rows, error) {
	return t.tx.Query(ctx, query, args...)
}

// QueryRow executes a query that returns a single row
func (t *Transaction) QueryRow(ctx context.Context, query string, args ...interface{}) pgx.Row {
	return t.tx.QueryRow(ctx, query, args...)
}

// DBFromPool creates a sql.DB instance from pgx for compatibility with libraries that require it
// This is a bridge for libraries that can't work directly with pgx
func DBFromPool(ctx context.Context, pool *pgxpool.Pool) (*sql.DB, error) {
	return sql.OpenDB(pgxStdConnector{pool: pool}), nil
}

// pgxStdConnector implements driver.Connector interface for pgx
type pgxStdConnector struct {
	pool *pgxpool.Pool
}

// Connect implements driver.Connector interface
func (c pgxStdConnector) Connect(context.Context) (driver.Conn, error) {
	conn, err := c.pool.Acquire(context.Background())
	if err != nil {
		return nil, err
	}
	return &pgxStdConn{conn: conn}, nil
}

// Driver implements driver.Connector interface
func (pgxStdConnector) Driver() driver.Driver {
	return &pgxStdDriver{}
}

// pgxStdDriver implements driver.Driver interface for pgx
type pgxStdDriver struct{}

// Open implements driver.Driver
func (pgxStdDriver) Open(name string) (driver.Conn, error) {
	return nil, fmt.Errorf("open should not be called directly")
}

// pgxStdConn is an adapter from pgx to database/sql
type pgxStdConn struct {
	conn *pgxpool.Conn
}

// Prepare implements driver.Conn
func (c *pgxStdConn) Prepare(query string) (driver.Stmt, error) {
	return nil, fmt.Errorf("not implemented")
}

// Close implements driver.Conn
func (c *pgxStdConn) Close() error {
	c.conn.Release()
	return nil
}

// Begin implements driver.Conn
func (c *pgxStdConn) Begin() (driver.Tx, error) {
	return nil, fmt.Errorf("not implemented")
}
