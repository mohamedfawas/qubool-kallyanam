// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: user/v1/user.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_UpdateProfile_FullMethodName            = "/user.v1.UserService/UpdateProfile"
	UserService_PatchProfile_FullMethodName             = "/user.v1.UserService/PatchProfile"
	UserService_UploadProfilePhoto_FullMethodName       = "/user.v1.UserService/UploadProfilePhoto"
	UserService_DeleteProfilePhoto_FullMethodName       = "/user.v1.UserService/DeleteProfilePhoto"
	UserService_GetProfile_FullMethodName               = "/user.v1.UserService/GetProfile"
	UserService_UpdatePartnerPreferences_FullMethodName = "/user.v1.UserService/UpdatePartnerPreferences"
	UserService_PatchPartnerPreferences_FullMethodName  = "/user.v1.UserService/PatchPartnerPreferences"
	UserService_GetPartnerPreferences_FullMethodName    = "/user.v1.UserService/GetPartnerPreferences"
	UserService_GetRecommendedMatches_FullMethodName    = "/user.v1.UserService/GetRecommendedMatches"
	UserService_RecordMatchAction_FullMethodName        = "/user.v1.UserService/RecordMatchAction"
	UserService_UpdateMatchAction_FullMethodName        = "/user.v1.UserService/UpdateMatchAction"
	UserService_GetMatchHistory_FullMethodName          = "/user.v1.UserService/GetMatchHistory"
	UserService_GetMutualMatches_FullMethodName         = "/user.v1.UserService/GetMutualMatches"
	UserService_GetProfileByID_FullMethodName           = "/user.v1.UserService/GetProfileByID"
	UserService_GetBasicProfile_FullMethodName          = "/user.v1.UserService/GetBasicProfile"
	UserService_UploadUserPhoto_FullMethodName          = "/user.v1.UserService/UploadUserPhoto"
	UserService_GetUserPhotos_FullMethodName            = "/user.v1.UserService/GetUserPhotos"
	UserService_DeleteUserPhoto_FullMethodName          = "/user.v1.UserService/DeleteUserPhoto"
	UserService_UploadUserVideo_FullMethodName          = "/user.v1.UserService/UploadUserVideo"
	UserService_GetUserVideo_FullMethodName             = "/user.v1.UserService/GetUserVideo"
	UserService_DeleteUserVideo_FullMethodName          = "/user.v1.UserService/DeleteUserVideo"
	UserService_GetDetailedProfile_FullMethodName       = "/user.v1.UserService/GetDetailedProfile"
	UserService_GetProfileForAdmin_FullMethodName       = "/user.v1.UserService/GetProfileForAdmin"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	PatchProfile(ctx context.Context, in *PatchProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	UploadProfilePhoto(ctx context.Context, in *UploadProfilePhotoRequest, opts ...grpc.CallOption) (*UploadProfilePhotoResponse, error)
	DeleteProfilePhoto(ctx context.Context, in *DeleteProfilePhotoRequest, opts ...grpc.CallOption) (*DeleteProfilePhotoResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	UpdatePartnerPreferences(ctx context.Context, in *UpdatePartnerPreferencesRequest, opts ...grpc.CallOption) (*UpdatePartnerPreferencesResponse, error)
	PatchPartnerPreferences(ctx context.Context, in *PatchPartnerPreferencesRequest, opts ...grpc.CallOption) (*UpdatePartnerPreferencesResponse, error)
	GetPartnerPreferences(ctx context.Context, in *GetPartnerPreferencesRequest, opts ...grpc.CallOption) (*GetPartnerPreferencesResponse, error)
	GetRecommendedMatches(ctx context.Context, in *GetRecommendedMatchesRequest, opts ...grpc.CallOption) (*GetRecommendedMatchesResponse, error)
	RecordMatchAction(ctx context.Context, in *RecordMatchActionRequest, opts ...grpc.CallOption) (*RecordMatchActionResponse, error)
	UpdateMatchAction(ctx context.Context, in *UpdateMatchActionRequest, opts ...grpc.CallOption) (*UpdateMatchActionResponse, error)
	GetMatchHistory(ctx context.Context, in *GetMatchHistoryRequest, opts ...grpc.CallOption) (*GetMatchHistoryResponse, error)
	GetMutualMatches(ctx context.Context, in *GetMutualMatchesRequest, opts ...grpc.CallOption) (*GetMutualMatchesResponse, error)
	GetProfileByID(ctx context.Context, in *GetProfileByIDRequest, opts ...grpc.CallOption) (*GetProfileByIDResponse, error)
	GetBasicProfile(ctx context.Context, in *GetBasicProfileRequest, opts ...grpc.CallOption) (*GetBasicProfileResponse, error)
	UploadUserPhoto(ctx context.Context, in *UploadUserPhotoRequest, opts ...grpc.CallOption) (*UploadUserPhotoResponse, error)
	GetUserPhotos(ctx context.Context, in *GetUserPhotosRequest, opts ...grpc.CallOption) (*GetUserPhotosResponse, error)
	DeleteUserPhoto(ctx context.Context, in *DeleteUserPhotoRequest, opts ...grpc.CallOption) (*DeleteUserPhotoResponse, error)
	UploadUserVideo(ctx context.Context, in *UploadUserVideoRequest, opts ...grpc.CallOption) (*UploadUserVideoResponse, error)
	GetUserVideo(ctx context.Context, in *GetUserVideoRequest, opts ...grpc.CallOption) (*GetUserVideoResponse, error)
	DeleteUserVideo(ctx context.Context, in *DeleteUserVideoRequest, opts ...grpc.CallOption) (*DeleteUserVideoResponse, error)
	GetDetailedProfile(ctx context.Context, in *GetDetailedProfileRequest, opts ...grpc.CallOption) (*GetDetailedProfileResponse, error)
	GetProfileForAdmin(ctx context.Context, in *GetProfileForAdminRequest, opts ...grpc.CallOption) (*GetDetailedProfileResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PatchProfile(ctx context.Context, in *PatchProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, UserService_PatchProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadProfilePhoto(ctx context.Context, in *UploadProfilePhotoRequest, opts ...grpc.CallOption) (*UploadProfilePhotoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadProfilePhotoResponse)
	err := c.cc.Invoke(ctx, UserService_UploadProfilePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteProfilePhoto(ctx context.Context, in *DeleteProfilePhotoRequest, opts ...grpc.CallOption) (*DeleteProfilePhotoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProfilePhotoResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteProfilePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePartnerPreferences(ctx context.Context, in *UpdatePartnerPreferencesRequest, opts ...grpc.CallOption) (*UpdatePartnerPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePartnerPreferencesResponse)
	err := c.cc.Invoke(ctx, UserService_UpdatePartnerPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PatchPartnerPreferences(ctx context.Context, in *PatchPartnerPreferencesRequest, opts ...grpc.CallOption) (*UpdatePartnerPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePartnerPreferencesResponse)
	err := c.cc.Invoke(ctx, UserService_PatchPartnerPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPartnerPreferences(ctx context.Context, in *GetPartnerPreferencesRequest, opts ...grpc.CallOption) (*GetPartnerPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartnerPreferencesResponse)
	err := c.cc.Invoke(ctx, UserService_GetPartnerPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRecommendedMatches(ctx context.Context, in *GetRecommendedMatchesRequest, opts ...grpc.CallOption) (*GetRecommendedMatchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendedMatchesResponse)
	err := c.cc.Invoke(ctx, UserService_GetRecommendedMatches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RecordMatchAction(ctx context.Context, in *RecordMatchActionRequest, opts ...grpc.CallOption) (*RecordMatchActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordMatchActionResponse)
	err := c.cc.Invoke(ctx, UserService_RecordMatchAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateMatchAction(ctx context.Context, in *UpdateMatchActionRequest, opts ...grpc.CallOption) (*UpdateMatchActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMatchActionResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateMatchAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMatchHistory(ctx context.Context, in *GetMatchHistoryRequest, opts ...grpc.CallOption) (*GetMatchHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchHistoryResponse)
	err := c.cc.Invoke(ctx, UserService_GetMatchHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMutualMatches(ctx context.Context, in *GetMutualMatchesRequest, opts ...grpc.CallOption) (*GetMutualMatchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMutualMatchesResponse)
	err := c.cc.Invoke(ctx, UserService_GetMutualMatches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfileByID(ctx context.Context, in *GetProfileByIDRequest, opts ...grpc.CallOption) (*GetProfileByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetProfileByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetBasicProfile(ctx context.Context, in *GetBasicProfileRequest, opts ...grpc.CallOption) (*GetBasicProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBasicProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetBasicProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadUserPhoto(ctx context.Context, in *UploadUserPhotoRequest, opts ...grpc.CallOption) (*UploadUserPhotoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadUserPhotoResponse)
	err := c.cc.Invoke(ctx, UserService_UploadUserPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserPhotos(ctx context.Context, in *GetUserPhotosRequest, opts ...grpc.CallOption) (*GetUserPhotosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPhotosResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserPhotos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserPhoto(ctx context.Context, in *DeleteUserPhotoRequest, opts ...grpc.CallOption) (*DeleteUserPhotoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserPhotoResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadUserVideo(ctx context.Context, in *UploadUserVideoRequest, opts ...grpc.CallOption) (*UploadUserVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadUserVideoResponse)
	err := c.cc.Invoke(ctx, UserService_UploadUserVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserVideo(ctx context.Context, in *GetUserVideoRequest, opts ...grpc.CallOption) (*GetUserVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserVideoResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserVideo(ctx context.Context, in *DeleteUserVideoRequest, opts ...grpc.CallOption) (*DeleteUserVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserVideoResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDetailedProfile(ctx context.Context, in *GetDetailedProfileRequest, opts ...grpc.CallOption) (*GetDetailedProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailedProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetDetailedProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfileForAdmin(ctx context.Context, in *GetProfileForAdminRequest, opts ...grpc.CallOption) (*GetDetailedProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailedProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetProfileForAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	PatchProfile(context.Context, *PatchProfileRequest) (*UpdateProfileResponse, error)
	UploadProfilePhoto(context.Context, *UploadProfilePhotoRequest) (*UploadProfilePhotoResponse, error)
	DeleteProfilePhoto(context.Context, *DeleteProfilePhotoRequest) (*DeleteProfilePhotoResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	UpdatePartnerPreferences(context.Context, *UpdatePartnerPreferencesRequest) (*UpdatePartnerPreferencesResponse, error)
	PatchPartnerPreferences(context.Context, *PatchPartnerPreferencesRequest) (*UpdatePartnerPreferencesResponse, error)
	GetPartnerPreferences(context.Context, *GetPartnerPreferencesRequest) (*GetPartnerPreferencesResponse, error)
	GetRecommendedMatches(context.Context, *GetRecommendedMatchesRequest) (*GetRecommendedMatchesResponse, error)
	RecordMatchAction(context.Context, *RecordMatchActionRequest) (*RecordMatchActionResponse, error)
	UpdateMatchAction(context.Context, *UpdateMatchActionRequest) (*UpdateMatchActionResponse, error)
	GetMatchHistory(context.Context, *GetMatchHistoryRequest) (*GetMatchHistoryResponse, error)
	GetMutualMatches(context.Context, *GetMutualMatchesRequest) (*GetMutualMatchesResponse, error)
	GetProfileByID(context.Context, *GetProfileByIDRequest) (*GetProfileByIDResponse, error)
	GetBasicProfile(context.Context, *GetBasicProfileRequest) (*GetBasicProfileResponse, error)
	UploadUserPhoto(context.Context, *UploadUserPhotoRequest) (*UploadUserPhotoResponse, error)
	GetUserPhotos(context.Context, *GetUserPhotosRequest) (*GetUserPhotosResponse, error)
	DeleteUserPhoto(context.Context, *DeleteUserPhotoRequest) (*DeleteUserPhotoResponse, error)
	UploadUserVideo(context.Context, *UploadUserVideoRequest) (*UploadUserVideoResponse, error)
	GetUserVideo(context.Context, *GetUserVideoRequest) (*GetUserVideoResponse, error)
	DeleteUserVideo(context.Context, *DeleteUserVideoRequest) (*DeleteUserVideoResponse, error)
	GetDetailedProfile(context.Context, *GetDetailedProfileRequest) (*GetDetailedProfileResponse, error)
	GetProfileForAdmin(context.Context, *GetProfileForAdminRequest) (*GetDetailedProfileResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedUserServiceServer) PatchProfile(context.Context, *PatchProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProfile not implemented")
}
func (UnimplementedUserServiceServer) UploadProfilePhoto(context.Context, *UploadProfilePhotoRequest) (*UploadProfilePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProfilePhoto not implemented")
}
func (UnimplementedUserServiceServer) DeleteProfilePhoto(context.Context, *DeleteProfilePhotoRequest) (*DeleteProfilePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfilePhoto not implemented")
}
func (UnimplementedUserServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUserServiceServer) UpdatePartnerPreferences(context.Context, *UpdatePartnerPreferencesRequest) (*UpdatePartnerPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartnerPreferences not implemented")
}
func (UnimplementedUserServiceServer) PatchPartnerPreferences(context.Context, *PatchPartnerPreferencesRequest) (*UpdatePartnerPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchPartnerPreferences not implemented")
}
func (UnimplementedUserServiceServer) GetPartnerPreferences(context.Context, *GetPartnerPreferencesRequest) (*GetPartnerPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerPreferences not implemented")
}
func (UnimplementedUserServiceServer) GetRecommendedMatches(context.Context, *GetRecommendedMatchesRequest) (*GetRecommendedMatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedMatches not implemented")
}
func (UnimplementedUserServiceServer) RecordMatchAction(context.Context, *RecordMatchActionRequest) (*RecordMatchActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordMatchAction not implemented")
}
func (UnimplementedUserServiceServer) UpdateMatchAction(context.Context, *UpdateMatchActionRequest) (*UpdateMatchActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMatchAction not implemented")
}
func (UnimplementedUserServiceServer) GetMatchHistory(context.Context, *GetMatchHistoryRequest) (*GetMatchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchHistory not implemented")
}
func (UnimplementedUserServiceServer) GetMutualMatches(context.Context, *GetMutualMatchesRequest) (*GetMutualMatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMutualMatches not implemented")
}
func (UnimplementedUserServiceServer) GetProfileByID(context.Context, *GetProfileByIDRequest) (*GetProfileByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByID not implemented")
}
func (UnimplementedUserServiceServer) GetBasicProfile(context.Context, *GetBasicProfileRequest) (*GetBasicProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicProfile not implemented")
}
func (UnimplementedUserServiceServer) UploadUserPhoto(context.Context, *UploadUserPhotoRequest) (*UploadUserPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserPhoto not implemented")
}
func (UnimplementedUserServiceServer) GetUserPhotos(context.Context, *GetUserPhotosRequest) (*GetUserPhotosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPhotos not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserPhoto(context.Context, *DeleteUserPhotoRequest) (*DeleteUserPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPhoto not implemented")
}
func (UnimplementedUserServiceServer) UploadUserVideo(context.Context, *UploadUserVideoRequest) (*UploadUserVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserVideo not implemented")
}
func (UnimplementedUserServiceServer) GetUserVideo(context.Context, *GetUserVideoRequest) (*GetUserVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVideo not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserVideo(context.Context, *DeleteUserVideoRequest) (*DeleteUserVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserVideo not implemented")
}
func (UnimplementedUserServiceServer) GetDetailedProfile(context.Context, *GetDetailedProfileRequest) (*GetDetailedProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailedProfile not implemented")
}
func (UnimplementedUserServiceServer) GetProfileForAdmin(context.Context, *GetProfileForAdminRequest) (*GetDetailedProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileForAdmin not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PatchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PatchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_PatchProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PatchProfile(ctx, req.(*PatchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadProfilePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UploadProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UploadProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UploadProfilePhoto(ctx, req.(*UploadProfilePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfilePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteProfilePhoto(ctx, req.(*DeleteProfilePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePartnerPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnerPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePartnerPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdatePartnerPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePartnerPreferences(ctx, req.(*UpdatePartnerPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PatchPartnerPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchPartnerPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PatchPartnerPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_PatchPartnerPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PatchPartnerPreferences(ctx, req.(*PatchPartnerPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPartnerPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPartnerPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetPartnerPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPartnerPreferences(ctx, req.(*GetPartnerPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRecommendedMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendedMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRecommendedMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetRecommendedMatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRecommendedMatches(ctx, req.(*GetRecommendedMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RecordMatchAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordMatchActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RecordMatchAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RecordMatchAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RecordMatchAction(ctx, req.(*RecordMatchActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateMatchAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMatchActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateMatchAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateMatchAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateMatchAction(ctx, req.(*UpdateMatchActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMatchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMatchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetMatchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMatchHistory(ctx, req.(*GetMatchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMutualMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMutualMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMutualMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetMutualMatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMutualMatches(ctx, req.(*GetMutualMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetProfileByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfileByID(ctx, req.(*GetProfileByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetBasicProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasicProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetBasicProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetBasicProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetBasicProfile(ctx, req.(*GetBasicProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUserPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UploadUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UploadUserPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UploadUserPhoto(ctx, req.(*UploadUserPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPhotosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserPhotos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserPhotos(ctx, req.(*GetUserPhotosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserPhoto(ctx, req.(*DeleteUserPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadUserVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUserVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UploadUserVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UploadUserVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UploadUserVideo(ctx, req.(*UploadUserVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserVideo(ctx, req.(*GetUserVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserVideo(ctx, req.(*DeleteUserVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDetailedProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailedProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDetailedProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetDetailedProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDetailedProfile(ctx, req.(*GetDetailedProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfileForAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileForAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfileForAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetProfileForAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfileForAdmin(ctx, req.(*GetProfileForAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProfile",
			Handler:    _UserService_UpdateProfile_Handler,
		},
		{
			MethodName: "PatchProfile",
			Handler:    _UserService_PatchProfile_Handler,
		},
		{
			MethodName: "UploadProfilePhoto",
			Handler:    _UserService_UploadProfilePhoto_Handler,
		},
		{
			MethodName: "DeleteProfilePhoto",
			Handler:    _UserService_DeleteProfilePhoto_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _UserService_GetProfile_Handler,
		},
		{
			MethodName: "UpdatePartnerPreferences",
			Handler:    _UserService_UpdatePartnerPreferences_Handler,
		},
		{
			MethodName: "PatchPartnerPreferences",
			Handler:    _UserService_PatchPartnerPreferences_Handler,
		},
		{
			MethodName: "GetPartnerPreferences",
			Handler:    _UserService_GetPartnerPreferences_Handler,
		},
		{
			MethodName: "GetRecommendedMatches",
			Handler:    _UserService_GetRecommendedMatches_Handler,
		},
		{
			MethodName: "RecordMatchAction",
			Handler:    _UserService_RecordMatchAction_Handler,
		},
		{
			MethodName: "UpdateMatchAction",
			Handler:    _UserService_UpdateMatchAction_Handler,
		},
		{
			MethodName: "GetMatchHistory",
			Handler:    _UserService_GetMatchHistory_Handler,
		},
		{
			MethodName: "GetMutualMatches",
			Handler:    _UserService_GetMutualMatches_Handler,
		},
		{
			MethodName: "GetProfileByID",
			Handler:    _UserService_GetProfileByID_Handler,
		},
		{
			MethodName: "GetBasicProfile",
			Handler:    _UserService_GetBasicProfile_Handler,
		},
		{
			MethodName: "UploadUserPhoto",
			Handler:    _UserService_UploadUserPhoto_Handler,
		},
		{
			MethodName: "GetUserPhotos",
			Handler:    _UserService_GetUserPhotos_Handler,
		},
		{
			MethodName: "DeleteUserPhoto",
			Handler:    _UserService_DeleteUserPhoto_Handler,
		},
		{
			MethodName: "UploadUserVideo",
			Handler:    _UserService_UploadUserVideo_Handler,
		},
		{
			MethodName: "GetUserVideo",
			Handler:    _UserService_GetUserVideo_Handler,
		},
		{
			MethodName: "DeleteUserVideo",
			Handler:    _UserService_DeleteUserVideo_Handler,
		},
		{
			MethodName: "GetDetailedProfile",
			Handler:    _UserService_GetDetailedProfile_Handler,
		},
		{
			MethodName: "GetProfileForAdmin",
			Handler:    _UserService_GetProfileForAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
