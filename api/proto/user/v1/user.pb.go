// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: user/v1/user.proto

package userpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateProfileRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	IsBride               bool                   `protobuf:"varint,1,opt,name=is_bride,json=isBride,proto3" json:"is_bride,omitempty"`
	FullName              string                 `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	DateOfBirth           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	HeightCm              int32                  `protobuf:"varint,4,opt,name=height_cm,json=heightCm,proto3" json:"height_cm,omitempty"`
	PhysicallyChallenged  bool                   `protobuf:"varint,5,opt,name=physically_challenged,json=physicallyChallenged,proto3" json:"physically_challenged,omitempty"`
	Community             string                 `protobuf:"bytes,6,opt,name=community,proto3" json:"community,omitempty"`
	MaritalStatus         string                 `protobuf:"bytes,7,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status,omitempty"`
	Profession            string                 `protobuf:"bytes,8,opt,name=profession,proto3" json:"profession,omitempty"`
	ProfessionType        string                 `protobuf:"bytes,9,opt,name=profession_type,json=professionType,proto3" json:"profession_type,omitempty"`
	HighestEducationLevel string                 `protobuf:"bytes,10,opt,name=highest_education_level,json=highestEducationLevel,proto3" json:"highest_education_level,omitempty"`
	HomeDistrict          string                 `protobuf:"bytes,11,opt,name=home_district,json=homeDistrict,proto3" json:"home_district,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpdateProfileRequest) Reset() {
	*x = UpdateProfileRequest{}
	mi := &file_user_v1_user_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileRequest) ProtoMessage() {}

func (x *UpdateProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateProfileRequest) GetIsBride() bool {
	if x != nil {
		return x.IsBride
	}
	return false
}

func (x *UpdateProfileRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UpdateProfileRequest) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *UpdateProfileRequest) GetHeightCm() int32 {
	if x != nil {
		return x.HeightCm
	}
	return 0
}

func (x *UpdateProfileRequest) GetPhysicallyChallenged() bool {
	if x != nil {
		return x.PhysicallyChallenged
	}
	return false
}

func (x *UpdateProfileRequest) GetCommunity() string {
	if x != nil {
		return x.Community
	}
	return ""
}

func (x *UpdateProfileRequest) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *UpdateProfileRequest) GetProfession() string {
	if x != nil {
		return x.Profession
	}
	return ""
}

func (x *UpdateProfileRequest) GetProfessionType() string {
	if x != nil {
		return x.ProfessionType
	}
	return ""
}

func (x *UpdateProfileRequest) GetHighestEducationLevel() string {
	if x != nil {
		return x.HighestEducationLevel
	}
	return ""
}

func (x *UpdateProfileRequest) GetHomeDistrict() string {
	if x != nil {
		return x.HomeDistrict
	}
	return ""
}

type UpdateProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProfileResponse) Reset() {
	*x = UpdateProfileResponse{}
	mi := &file_user_v1_user_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileResponse) ProtoMessage() {}

func (x *UpdateProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileResponse.ProtoReflect.Descriptor instead.
func (*UpdateProfileResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateProfileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateProfileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateProfileResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type PatchProfileRequest struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	IsBride               *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=is_bride,json=isBride,proto3" json:"is_bride,omitempty"`
	FullName              *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	DateOfBirth           *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	HeightCm              *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=height_cm,json=heightCm,proto3" json:"height_cm,omitempty"`
	PhysicallyChallenged  *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=physically_challenged,json=physicallyChallenged,proto3" json:"physically_challenged,omitempty"`
	Community             *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=community,proto3" json:"community,omitempty"`
	MaritalStatus         *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status,omitempty"`
	Profession            *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=profession,proto3" json:"profession,omitempty"`
	ProfessionType        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=profession_type,json=professionType,proto3" json:"profession_type,omitempty"`
	HighestEducationLevel *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=highest_education_level,json=highestEducationLevel,proto3" json:"highest_education_level,omitempty"`
	HomeDistrict          *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=home_district,json=homeDistrict,proto3" json:"home_district,omitempty"`
	// Fields to nullify (set to null/empty)
	ClearDateOfBirth bool `protobuf:"varint,12,opt,name=clear_date_of_birth,json=clearDateOfBirth,proto3" json:"clear_date_of_birth,omitempty"`
	ClearHeightCm    bool `protobuf:"varint,13,opt,name=clear_height_cm,json=clearHeightCm,proto3" json:"clear_height_cm,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PatchProfileRequest) Reset() {
	*x = PatchProfileRequest{}
	mi := &file_user_v1_user_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchProfileRequest) ProtoMessage() {}

func (x *PatchProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchProfileRequest.ProtoReflect.Descriptor instead.
func (*PatchProfileRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *PatchProfileRequest) GetIsBride() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsBride
	}
	return nil
}

func (x *PatchProfileRequest) GetFullName() *wrapperspb.StringValue {
	if x != nil {
		return x.FullName
	}
	return nil
}

func (x *PatchProfileRequest) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *PatchProfileRequest) GetHeightCm() *wrapperspb.Int32Value {
	if x != nil {
		return x.HeightCm
	}
	return nil
}

func (x *PatchProfileRequest) GetPhysicallyChallenged() *wrapperspb.BoolValue {
	if x != nil {
		return x.PhysicallyChallenged
	}
	return nil
}

func (x *PatchProfileRequest) GetCommunity() *wrapperspb.StringValue {
	if x != nil {
		return x.Community
	}
	return nil
}

func (x *PatchProfileRequest) GetMaritalStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.MaritalStatus
	}
	return nil
}

func (x *PatchProfileRequest) GetProfession() *wrapperspb.StringValue {
	if x != nil {
		return x.Profession
	}
	return nil
}

func (x *PatchProfileRequest) GetProfessionType() *wrapperspb.StringValue {
	if x != nil {
		return x.ProfessionType
	}
	return nil
}

func (x *PatchProfileRequest) GetHighestEducationLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.HighestEducationLevel
	}
	return nil
}

func (x *PatchProfileRequest) GetHomeDistrict() *wrapperspb.StringValue {
	if x != nil {
		return x.HomeDistrict
	}
	return nil
}

func (x *PatchProfileRequest) GetClearDateOfBirth() bool {
	if x != nil {
		return x.ClearDateOfBirth
	}
	return false
}

func (x *PatchProfileRequest) GetClearHeightCm() bool {
	if x != nil {
		return x.ClearHeightCm
	}
	return false
}

type UploadProfilePhotoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PhotoData     []byte                 `protobuf:"bytes,1,opt,name=photo_data,json=photoData,proto3" json:"photo_data,omitempty"`
	FileName      string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	ContentType   string                 `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadProfilePhotoRequest) Reset() {
	*x = UploadProfilePhotoRequest{}
	mi := &file_user_v1_user_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadProfilePhotoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadProfilePhotoRequest) ProtoMessage() {}

func (x *UploadProfilePhotoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadProfilePhotoRequest.ProtoReflect.Descriptor instead.
func (*UploadProfilePhotoRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *UploadProfilePhotoRequest) GetPhotoData() []byte {
	if x != nil {
		return x.PhotoData
	}
	return nil
}

func (x *UploadProfilePhotoRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadProfilePhotoRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type UploadProfilePhotoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	PhotoUrl      string                 `protobuf:"bytes,4,opt,name=photo_url,json=photoUrl,proto3" json:"photo_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadProfilePhotoResponse) Reset() {
	*x = UploadProfilePhotoResponse{}
	mi := &file_user_v1_user_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadProfilePhotoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadProfilePhotoResponse) ProtoMessage() {}

func (x *UploadProfilePhotoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadProfilePhotoResponse.ProtoReflect.Descriptor instead.
func (*UploadProfilePhotoResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *UploadProfilePhotoResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadProfilePhotoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UploadProfilePhotoResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *UploadProfilePhotoResponse) GetPhotoUrl() string {
	if x != nil {
		return x.PhotoUrl
	}
	return ""
}

type DeleteProfilePhotoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProfilePhotoRequest) Reset() {
	*x = DeleteProfilePhotoRequest{}
	mi := &file_user_v1_user_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProfilePhotoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProfilePhotoRequest) ProtoMessage() {}

func (x *DeleteProfilePhotoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProfilePhotoRequest.ProtoReflect.Descriptor instead.
func (*DeleteProfilePhotoRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{5}
}

type DeleteProfilePhotoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProfilePhotoResponse) Reset() {
	*x = DeleteProfilePhotoResponse{}
	mi := &file_user_v1_user_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProfilePhotoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProfilePhotoResponse) ProtoMessage() {}

func (x *DeleteProfilePhotoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProfilePhotoResponse.ProtoReflect.Descriptor instead.
func (*DeleteProfilePhotoResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteProfilePhotoResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteProfilePhotoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteProfilePhotoResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProfileRequest) Reset() {
	*x = GetProfileRequest{}
	mi := &file_user_v1_user_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileRequest) ProtoMessage() {}

func (x *GetProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileRequest.ProtoReflect.Descriptor instead.
func (*GetProfileRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{7}
}

type ProfileData struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsBride               bool                   `protobuf:"varint,2,opt,name=is_bride,json=isBride,proto3" json:"is_bride,omitempty"`
	FullName              string                 `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Phone                 string                 `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	DateOfBirth           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	HeightCm              int32                  `protobuf:"varint,6,opt,name=height_cm,json=heightCm,proto3" json:"height_cm,omitempty"`
	PhysicallyChallenged  bool                   `protobuf:"varint,7,opt,name=physically_challenged,json=physicallyChallenged,proto3" json:"physically_challenged,omitempty"`
	Community             string                 `protobuf:"bytes,8,opt,name=community,proto3" json:"community,omitempty"`
	MaritalStatus         string                 `protobuf:"bytes,9,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status,omitempty"`
	Profession            string                 `protobuf:"bytes,10,opt,name=profession,proto3" json:"profession,omitempty"`
	ProfessionType        string                 `protobuf:"bytes,11,opt,name=profession_type,json=professionType,proto3" json:"profession_type,omitempty"`
	HighestEducationLevel string                 `protobuf:"bytes,12,opt,name=highest_education_level,json=highestEducationLevel,proto3" json:"highest_education_level,omitempty"`
	HomeDistrict          string                 `protobuf:"bytes,13,opt,name=home_district,json=homeDistrict,proto3" json:"home_district,omitempty"`
	ProfilePictureUrl     string                 `protobuf:"bytes,14,opt,name=profile_picture_url,json=profilePictureUrl,proto3" json:"profile_picture_url,omitempty"`
	LastLogin             *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=last_login,json=lastLogin,proto3" json:"last_login,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ProfileData) Reset() {
	*x = ProfileData{}
	mi := &file_user_v1_user_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileData) ProtoMessage() {}

func (x *ProfileData) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileData.ProtoReflect.Descriptor instead.
func (*ProfileData) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{8}
}

func (x *ProfileData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProfileData) GetIsBride() bool {
	if x != nil {
		return x.IsBride
	}
	return false
}

func (x *ProfileData) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ProfileData) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ProfileData) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *ProfileData) GetHeightCm() int32 {
	if x != nil {
		return x.HeightCm
	}
	return 0
}

func (x *ProfileData) GetPhysicallyChallenged() bool {
	if x != nil {
		return x.PhysicallyChallenged
	}
	return false
}

func (x *ProfileData) GetCommunity() string {
	if x != nil {
		return x.Community
	}
	return ""
}

func (x *ProfileData) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *ProfileData) GetProfession() string {
	if x != nil {
		return x.Profession
	}
	return ""
}

func (x *ProfileData) GetProfessionType() string {
	if x != nil {
		return x.ProfessionType
	}
	return ""
}

func (x *ProfileData) GetHighestEducationLevel() string {
	if x != nil {
		return x.HighestEducationLevel
	}
	return ""
}

func (x *ProfileData) GetHomeDistrict() string {
	if x != nil {
		return x.HomeDistrict
	}
	return ""
}

func (x *ProfileData) GetProfilePictureUrl() string {
	if x != nil {
		return x.ProfilePictureUrl
	}
	return ""
}

func (x *ProfileData) GetLastLogin() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLogin
	}
	return nil
}

func (x *ProfileData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type GetProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Profile       *ProfileData           `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProfileResponse) Reset() {
	*x = GetProfileResponse{}
	mi := &file_user_v1_user_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileResponse) ProtoMessage() {}

func (x *GetProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileResponse.ProtoReflect.Descriptor instead.
func (*GetProfileResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{9}
}

func (x *GetProfileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetProfileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProfileResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetProfileResponse) GetProfile() *ProfileData {
	if x != nil {
		return x.Profile
	}
	return nil
}

type UpdatePartnerPreferencesRequest struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	MinAgeYears                int32                  `protobuf:"varint,1,opt,name=min_age_years,json=minAgeYears,proto3" json:"min_age_years,omitempty"`
	MaxAgeYears                int32                  `protobuf:"varint,2,opt,name=max_age_years,json=maxAgeYears,proto3" json:"max_age_years,omitempty"`
	MinHeightCm                int32                  `protobuf:"varint,3,opt,name=min_height_cm,json=minHeightCm,proto3" json:"min_height_cm,omitempty"`
	MaxHeightCm                int32                  `protobuf:"varint,4,opt,name=max_height_cm,json=maxHeightCm,proto3" json:"max_height_cm,omitempty"`
	AcceptPhysicallyChallenged bool                   `protobuf:"varint,5,opt,name=accept_physically_challenged,json=acceptPhysicallyChallenged,proto3" json:"accept_physically_challenged,omitempty"`
	PreferredCommunities       []string               `protobuf:"bytes,6,rep,name=preferred_communities,json=preferredCommunities,proto3" json:"preferred_communities,omitempty"`
	PreferredMaritalStatus     []string               `protobuf:"bytes,7,rep,name=preferred_marital_status,json=preferredMaritalStatus,proto3" json:"preferred_marital_status,omitempty"`
	PreferredProfessions       []string               `protobuf:"bytes,8,rep,name=preferred_professions,json=preferredProfessions,proto3" json:"preferred_professions,omitempty"`
	PreferredProfessionTypes   []string               `protobuf:"bytes,9,rep,name=preferred_profession_types,json=preferredProfessionTypes,proto3" json:"preferred_profession_types,omitempty"`
	PreferredEducationLevels   []string               `protobuf:"bytes,10,rep,name=preferred_education_levels,json=preferredEducationLevels,proto3" json:"preferred_education_levels,omitempty"`
	PreferredHomeDistricts     []string               `protobuf:"bytes,11,rep,name=preferred_home_districts,json=preferredHomeDistricts,proto3" json:"preferred_home_districts,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UpdatePartnerPreferencesRequest) Reset() {
	*x = UpdatePartnerPreferencesRequest{}
	mi := &file_user_v1_user_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePartnerPreferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartnerPreferencesRequest) ProtoMessage() {}

func (x *UpdatePartnerPreferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartnerPreferencesRequest.ProtoReflect.Descriptor instead.
func (*UpdatePartnerPreferencesRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{10}
}

func (x *UpdatePartnerPreferencesRequest) GetMinAgeYears() int32 {
	if x != nil {
		return x.MinAgeYears
	}
	return 0
}

func (x *UpdatePartnerPreferencesRequest) GetMaxAgeYears() int32 {
	if x != nil {
		return x.MaxAgeYears
	}
	return 0
}

func (x *UpdatePartnerPreferencesRequest) GetMinHeightCm() int32 {
	if x != nil {
		return x.MinHeightCm
	}
	return 0
}

func (x *UpdatePartnerPreferencesRequest) GetMaxHeightCm() int32 {
	if x != nil {
		return x.MaxHeightCm
	}
	return 0
}

func (x *UpdatePartnerPreferencesRequest) GetAcceptPhysicallyChallenged() bool {
	if x != nil {
		return x.AcceptPhysicallyChallenged
	}
	return false
}

func (x *UpdatePartnerPreferencesRequest) GetPreferredCommunities() []string {
	if x != nil {
		return x.PreferredCommunities
	}
	return nil
}

func (x *UpdatePartnerPreferencesRequest) GetPreferredMaritalStatus() []string {
	if x != nil {
		return x.PreferredMaritalStatus
	}
	return nil
}

func (x *UpdatePartnerPreferencesRequest) GetPreferredProfessions() []string {
	if x != nil {
		return x.PreferredProfessions
	}
	return nil
}

func (x *UpdatePartnerPreferencesRequest) GetPreferredProfessionTypes() []string {
	if x != nil {
		return x.PreferredProfessionTypes
	}
	return nil
}

func (x *UpdatePartnerPreferencesRequest) GetPreferredEducationLevels() []string {
	if x != nil {
		return x.PreferredEducationLevels
	}
	return nil
}

func (x *UpdatePartnerPreferencesRequest) GetPreferredHomeDistricts() []string {
	if x != nil {
		return x.PreferredHomeDistricts
	}
	return nil
}

type UpdatePartnerPreferencesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePartnerPreferencesResponse) Reset() {
	*x = UpdatePartnerPreferencesResponse{}
	mi := &file_user_v1_user_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePartnerPreferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartnerPreferencesResponse) ProtoMessage() {}

func (x *UpdatePartnerPreferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartnerPreferencesResponse.ProtoReflect.Descriptor instead.
func (*UpdatePartnerPreferencesResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePartnerPreferencesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdatePartnerPreferencesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdatePartnerPreferencesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type PatchPartnerPreferencesRequest struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	MinAgeYears                *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=min_age_years,json=minAgeYears,proto3" json:"min_age_years,omitempty"`
	MaxAgeYears                *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=max_age_years,json=maxAgeYears,proto3" json:"max_age_years,omitempty"`
	MinHeightCm                *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=min_height_cm,json=minHeightCm,proto3" json:"min_height_cm,omitempty"`
	MaxHeightCm                *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=max_height_cm,json=maxHeightCm,proto3" json:"max_height_cm,omitempty"`
	AcceptPhysicallyChallenged *wrapperspb.BoolValue  `protobuf:"bytes,5,opt,name=accept_physically_challenged,json=acceptPhysicallyChallenged,proto3" json:"accept_physically_challenged,omitempty"`
	PreferredCommunities       []string               `protobuf:"bytes,6,rep,name=preferred_communities,json=preferredCommunities,proto3" json:"preferred_communities,omitempty"`
	PreferredMaritalStatus     []string               `protobuf:"bytes,7,rep,name=preferred_marital_status,json=preferredMaritalStatus,proto3" json:"preferred_marital_status,omitempty"`
	PreferredProfessions       []string               `protobuf:"bytes,8,rep,name=preferred_professions,json=preferredProfessions,proto3" json:"preferred_professions,omitempty"`
	PreferredProfessionTypes   []string               `protobuf:"bytes,9,rep,name=preferred_profession_types,json=preferredProfessionTypes,proto3" json:"preferred_profession_types,omitempty"`
	PreferredEducationLevels   []string               `protobuf:"bytes,10,rep,name=preferred_education_levels,json=preferredEducationLevels,proto3" json:"preferred_education_levels,omitempty"`
	PreferredHomeDistricts     []string               `protobuf:"bytes,11,rep,name=preferred_home_districts,json=preferredHomeDistricts,proto3" json:"preferred_home_districts,omitempty"`
	// Fields to clear (set to empty arrays)
	ClearPreferredCommunities     bool `protobuf:"varint,12,opt,name=clear_preferred_communities,json=clearPreferredCommunities,proto3" json:"clear_preferred_communities,omitempty"`
	ClearPreferredMaritalStatus   bool `protobuf:"varint,13,opt,name=clear_preferred_marital_status,json=clearPreferredMaritalStatus,proto3" json:"clear_preferred_marital_status,omitempty"`
	ClearPreferredProfessions     bool `protobuf:"varint,14,opt,name=clear_preferred_professions,json=clearPreferredProfessions,proto3" json:"clear_preferred_professions,omitempty"`
	ClearPreferredProfessionTypes bool `protobuf:"varint,15,opt,name=clear_preferred_profession_types,json=clearPreferredProfessionTypes,proto3" json:"clear_preferred_profession_types,omitempty"`
	ClearPreferredEducationLevels bool `protobuf:"varint,16,opt,name=clear_preferred_education_levels,json=clearPreferredEducationLevels,proto3" json:"clear_preferred_education_levels,omitempty"`
	ClearPreferredHomeDistricts   bool `protobuf:"varint,17,opt,name=clear_preferred_home_districts,json=clearPreferredHomeDistricts,proto3" json:"clear_preferred_home_districts,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *PatchPartnerPreferencesRequest) Reset() {
	*x = PatchPartnerPreferencesRequest{}
	mi := &file_user_v1_user_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchPartnerPreferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchPartnerPreferencesRequest) ProtoMessage() {}

func (x *PatchPartnerPreferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchPartnerPreferencesRequest.ProtoReflect.Descriptor instead.
func (*PatchPartnerPreferencesRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{12}
}

func (x *PatchPartnerPreferencesRequest) GetMinAgeYears() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinAgeYears
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetMaxAgeYears() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxAgeYears
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetMinHeightCm() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinHeightCm
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetMaxHeightCm() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxHeightCm
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetAcceptPhysicallyChallenged() *wrapperspb.BoolValue {
	if x != nil {
		return x.AcceptPhysicallyChallenged
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetPreferredCommunities() []string {
	if x != nil {
		return x.PreferredCommunities
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetPreferredMaritalStatus() []string {
	if x != nil {
		return x.PreferredMaritalStatus
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetPreferredProfessions() []string {
	if x != nil {
		return x.PreferredProfessions
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetPreferredProfessionTypes() []string {
	if x != nil {
		return x.PreferredProfessionTypes
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetPreferredEducationLevels() []string {
	if x != nil {
		return x.PreferredEducationLevels
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetPreferredHomeDistricts() []string {
	if x != nil {
		return x.PreferredHomeDistricts
	}
	return nil
}

func (x *PatchPartnerPreferencesRequest) GetClearPreferredCommunities() bool {
	if x != nil {
		return x.ClearPreferredCommunities
	}
	return false
}

func (x *PatchPartnerPreferencesRequest) GetClearPreferredMaritalStatus() bool {
	if x != nil {
		return x.ClearPreferredMaritalStatus
	}
	return false
}

func (x *PatchPartnerPreferencesRequest) GetClearPreferredProfessions() bool {
	if x != nil {
		return x.ClearPreferredProfessions
	}
	return false
}

func (x *PatchPartnerPreferencesRequest) GetClearPreferredProfessionTypes() bool {
	if x != nil {
		return x.ClearPreferredProfessionTypes
	}
	return false
}

func (x *PatchPartnerPreferencesRequest) GetClearPreferredEducationLevels() bool {
	if x != nil {
		return x.ClearPreferredEducationLevels
	}
	return false
}

func (x *PatchPartnerPreferencesRequest) GetClearPreferredHomeDistricts() bool {
	if x != nil {
		return x.ClearPreferredHomeDistricts
	}
	return false
}

type GetPartnerPreferencesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPartnerPreferencesRequest) Reset() {
	*x = GetPartnerPreferencesRequest{}
	mi := &file_user_v1_user_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartnerPreferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerPreferencesRequest) ProtoMessage() {}

func (x *GetPartnerPreferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerPreferencesRequest.ProtoReflect.Descriptor instead.
func (*GetPartnerPreferencesRequest) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{13}
}

type PartnerPreferencesData struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	MinAgeYears                int32                  `protobuf:"varint,1,opt,name=min_age_years,json=minAgeYears,proto3" json:"min_age_years,omitempty"`
	MaxAgeYears                int32                  `protobuf:"varint,2,opt,name=max_age_years,json=maxAgeYears,proto3" json:"max_age_years,omitempty"`
	MinHeightCm                int32                  `protobuf:"varint,3,opt,name=min_height_cm,json=minHeightCm,proto3" json:"min_height_cm,omitempty"`
	MaxHeightCm                int32                  `protobuf:"varint,4,opt,name=max_height_cm,json=maxHeightCm,proto3" json:"max_height_cm,omitempty"`
	AcceptPhysicallyChallenged bool                   `protobuf:"varint,5,opt,name=accept_physically_challenged,json=acceptPhysicallyChallenged,proto3" json:"accept_physically_challenged,omitempty"`
	PreferredCommunities       []string               `protobuf:"bytes,6,rep,name=preferred_communities,json=preferredCommunities,proto3" json:"preferred_communities,omitempty"`
	PreferredMaritalStatus     []string               `protobuf:"bytes,7,rep,name=preferred_marital_status,json=preferredMaritalStatus,proto3" json:"preferred_marital_status,omitempty"`
	PreferredProfessions       []string               `protobuf:"bytes,8,rep,name=preferred_professions,json=preferredProfessions,proto3" json:"preferred_professions,omitempty"`
	PreferredProfessionTypes   []string               `protobuf:"bytes,9,rep,name=preferred_profession_types,json=preferredProfessionTypes,proto3" json:"preferred_profession_types,omitempty"`
	PreferredEducationLevels   []string               `protobuf:"bytes,10,rep,name=preferred_education_levels,json=preferredEducationLevels,proto3" json:"preferred_education_levels,omitempty"`
	PreferredHomeDistricts     []string               `protobuf:"bytes,11,rep,name=preferred_home_districts,json=preferredHomeDistricts,proto3" json:"preferred_home_districts,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *PartnerPreferencesData) Reset() {
	*x = PartnerPreferencesData{}
	mi := &file_user_v1_user_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartnerPreferencesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerPreferencesData) ProtoMessage() {}

func (x *PartnerPreferencesData) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerPreferencesData.ProtoReflect.Descriptor instead.
func (*PartnerPreferencesData) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{14}
}

func (x *PartnerPreferencesData) GetMinAgeYears() int32 {
	if x != nil {
		return x.MinAgeYears
	}
	return 0
}

func (x *PartnerPreferencesData) GetMaxAgeYears() int32 {
	if x != nil {
		return x.MaxAgeYears
	}
	return 0
}

func (x *PartnerPreferencesData) GetMinHeightCm() int32 {
	if x != nil {
		return x.MinHeightCm
	}
	return 0
}

func (x *PartnerPreferencesData) GetMaxHeightCm() int32 {
	if x != nil {
		return x.MaxHeightCm
	}
	return 0
}

func (x *PartnerPreferencesData) GetAcceptPhysicallyChallenged() bool {
	if x != nil {
		return x.AcceptPhysicallyChallenged
	}
	return false
}

func (x *PartnerPreferencesData) GetPreferredCommunities() []string {
	if x != nil {
		return x.PreferredCommunities
	}
	return nil
}

func (x *PartnerPreferencesData) GetPreferredMaritalStatus() []string {
	if x != nil {
		return x.PreferredMaritalStatus
	}
	return nil
}

func (x *PartnerPreferencesData) GetPreferredProfessions() []string {
	if x != nil {
		return x.PreferredProfessions
	}
	return nil
}

func (x *PartnerPreferencesData) GetPreferredProfessionTypes() []string {
	if x != nil {
		return x.PreferredProfessionTypes
	}
	return nil
}

func (x *PartnerPreferencesData) GetPreferredEducationLevels() []string {
	if x != nil {
		return x.PreferredEducationLevels
	}
	return nil
}

func (x *PartnerPreferencesData) GetPreferredHomeDistricts() []string {
	if x != nil {
		return x.PreferredHomeDistricts
	}
	return nil
}

type GetPartnerPreferencesResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Success       bool                    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error         string                  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Preferences   *PartnerPreferencesData `protobuf:"bytes,4,opt,name=preferences,proto3" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPartnerPreferencesResponse) Reset() {
	*x = GetPartnerPreferencesResponse{}
	mi := &file_user_v1_user_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPartnerPreferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerPreferencesResponse) ProtoMessage() {}

func (x *GetPartnerPreferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_v1_user_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerPreferencesResponse.ProtoReflect.Descriptor instead.
func (*GetPartnerPreferencesResponse) Descriptor() ([]byte, []int) {
	return file_user_v1_user_proto_rawDescGZIP(), []int{15}
}

func (x *GetPartnerPreferencesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetPartnerPreferencesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPartnerPreferencesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetPartnerPreferencesResponse) GetPreferences() *PartnerPreferencesData {
	if x != nil {
		return x.Preferences
	}
	return nil
}

var File_user_v1_user_proto protoreflect.FileDescriptor

var file_user_v1_user_proto_rawDesc = []byte{
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb,
	0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x42, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6d, 0x12, 0x33, 0x0a, 0x15,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x68, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0x61, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xc8, 0x06, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x73, 0x42, 0x72, 0x69, 0x64, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x63, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6d, 0x12, 0x4f, 0x0a, 0x15, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x12, 0x43, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x41, 0x0a, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x63, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6d, 0x22, 0x7a, 0x0a, 0x19, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x1b, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8e, 0x05, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x42, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x6d, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61,
	0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x45, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xcd, 0x04, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x63, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6d, 0x12, 0x40, 0x0a, 0x1c,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a,
	0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x45,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x38,
	0x0a, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x22, 0x6c, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf8, 0x08, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x67, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x41, 0x67, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6d,
	0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6d, 0x12, 0x3f, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6d, 0x12, 0x5c, 0x0a,
	0x1c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61,
	0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x72,
	0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x1a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x45, 0x64, 0x75, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x72,
	0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x45, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x1e,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xc4, 0x04, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x41, 0x67, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x63, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6d, 0x12, 0x40, 0x0a, 0x1c,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a,
	0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x45,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x38,
	0x0a, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x32, 0xf8, 0x05, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x17, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x6f, 0x68, 0x61, 0x6d, 0x65, 0x64, 0x66, 0x61, 0x77, 0x61, 0x73, 0x2f, 0x71, 0x75,
	0x62, 0x6f, 0x6f, 0x6c, 0x2d, 0x6b, 0x61, 0x6c, 0x6c, 0x79, 0x61, 0x6e, 0x61, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x3b, 0x75, 0x73, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_v1_user_proto_rawDescOnce sync.Once
	file_user_v1_user_proto_rawDescData = file_user_v1_user_proto_rawDesc
)

func file_user_v1_user_proto_rawDescGZIP() []byte {
	file_user_v1_user_proto_rawDescOnce.Do(func() {
		file_user_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_v1_user_proto_rawDescData)
	})
	return file_user_v1_user_proto_rawDescData
}

var file_user_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_user_v1_user_proto_goTypes = []any{
	(*UpdateProfileRequest)(nil),             // 0: user.v1.UpdateProfileRequest
	(*UpdateProfileResponse)(nil),            // 1: user.v1.UpdateProfileResponse
	(*PatchProfileRequest)(nil),              // 2: user.v1.PatchProfileRequest
	(*UploadProfilePhotoRequest)(nil),        // 3: user.v1.UploadProfilePhotoRequest
	(*UploadProfilePhotoResponse)(nil),       // 4: user.v1.UploadProfilePhotoResponse
	(*DeleteProfilePhotoRequest)(nil),        // 5: user.v1.DeleteProfilePhotoRequest
	(*DeleteProfilePhotoResponse)(nil),       // 6: user.v1.DeleteProfilePhotoResponse
	(*GetProfileRequest)(nil),                // 7: user.v1.GetProfileRequest
	(*ProfileData)(nil),                      // 8: user.v1.ProfileData
	(*GetProfileResponse)(nil),               // 9: user.v1.GetProfileResponse
	(*UpdatePartnerPreferencesRequest)(nil),  // 10: user.v1.UpdatePartnerPreferencesRequest
	(*UpdatePartnerPreferencesResponse)(nil), // 11: user.v1.UpdatePartnerPreferencesResponse
	(*PatchPartnerPreferencesRequest)(nil),   // 12: user.v1.PatchPartnerPreferencesRequest
	(*GetPartnerPreferencesRequest)(nil),     // 13: user.v1.GetPartnerPreferencesRequest
	(*PartnerPreferencesData)(nil),           // 14: user.v1.PartnerPreferencesData
	(*GetPartnerPreferencesResponse)(nil),    // 15: user.v1.GetPartnerPreferencesResponse
	(*timestamppb.Timestamp)(nil),            // 16: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),             // 17: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),           // 18: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),            // 19: google.protobuf.Int32Value
}
var file_user_v1_user_proto_depIdxs = []int32{
	16, // 0: user.v1.UpdateProfileRequest.date_of_birth:type_name -> google.protobuf.Timestamp
	17, // 1: user.v1.PatchProfileRequest.is_bride:type_name -> google.protobuf.BoolValue
	18, // 2: user.v1.PatchProfileRequest.full_name:type_name -> google.protobuf.StringValue
	16, // 3: user.v1.PatchProfileRequest.date_of_birth:type_name -> google.protobuf.Timestamp
	19, // 4: user.v1.PatchProfileRequest.height_cm:type_name -> google.protobuf.Int32Value
	17, // 5: user.v1.PatchProfileRequest.physically_challenged:type_name -> google.protobuf.BoolValue
	18, // 6: user.v1.PatchProfileRequest.community:type_name -> google.protobuf.StringValue
	18, // 7: user.v1.PatchProfileRequest.marital_status:type_name -> google.protobuf.StringValue
	18, // 8: user.v1.PatchProfileRequest.profession:type_name -> google.protobuf.StringValue
	18, // 9: user.v1.PatchProfileRequest.profession_type:type_name -> google.protobuf.StringValue
	18, // 10: user.v1.PatchProfileRequest.highest_education_level:type_name -> google.protobuf.StringValue
	18, // 11: user.v1.PatchProfileRequest.home_district:type_name -> google.protobuf.StringValue
	16, // 12: user.v1.ProfileData.date_of_birth:type_name -> google.protobuf.Timestamp
	16, // 13: user.v1.ProfileData.last_login:type_name -> google.protobuf.Timestamp
	16, // 14: user.v1.ProfileData.created_at:type_name -> google.protobuf.Timestamp
	8,  // 15: user.v1.GetProfileResponse.profile:type_name -> user.v1.ProfileData
	19, // 16: user.v1.PatchPartnerPreferencesRequest.min_age_years:type_name -> google.protobuf.Int32Value
	19, // 17: user.v1.PatchPartnerPreferencesRequest.max_age_years:type_name -> google.protobuf.Int32Value
	19, // 18: user.v1.PatchPartnerPreferencesRequest.min_height_cm:type_name -> google.protobuf.Int32Value
	19, // 19: user.v1.PatchPartnerPreferencesRequest.max_height_cm:type_name -> google.protobuf.Int32Value
	17, // 20: user.v1.PatchPartnerPreferencesRequest.accept_physically_challenged:type_name -> google.protobuf.BoolValue
	14, // 21: user.v1.GetPartnerPreferencesResponse.preferences:type_name -> user.v1.PartnerPreferencesData
	0,  // 22: user.v1.UserService.UpdateProfile:input_type -> user.v1.UpdateProfileRequest
	2,  // 23: user.v1.UserService.PatchProfile:input_type -> user.v1.PatchProfileRequest
	3,  // 24: user.v1.UserService.UploadProfilePhoto:input_type -> user.v1.UploadProfilePhotoRequest
	5,  // 25: user.v1.UserService.DeleteProfilePhoto:input_type -> user.v1.DeleteProfilePhotoRequest
	7,  // 26: user.v1.UserService.GetProfile:input_type -> user.v1.GetProfileRequest
	10, // 27: user.v1.UserService.UpdatePartnerPreferences:input_type -> user.v1.UpdatePartnerPreferencesRequest
	12, // 28: user.v1.UserService.PatchPartnerPreferences:input_type -> user.v1.PatchPartnerPreferencesRequest
	13, // 29: user.v1.UserService.GetPartnerPreferences:input_type -> user.v1.GetPartnerPreferencesRequest
	1,  // 30: user.v1.UserService.UpdateProfile:output_type -> user.v1.UpdateProfileResponse
	1,  // 31: user.v1.UserService.PatchProfile:output_type -> user.v1.UpdateProfileResponse
	4,  // 32: user.v1.UserService.UploadProfilePhoto:output_type -> user.v1.UploadProfilePhotoResponse
	6,  // 33: user.v1.UserService.DeleteProfilePhoto:output_type -> user.v1.DeleteProfilePhotoResponse
	9,  // 34: user.v1.UserService.GetProfile:output_type -> user.v1.GetProfileResponse
	11, // 35: user.v1.UserService.UpdatePartnerPreferences:output_type -> user.v1.UpdatePartnerPreferencesResponse
	11, // 36: user.v1.UserService.PatchPartnerPreferences:output_type -> user.v1.UpdatePartnerPreferencesResponse
	15, // 37: user.v1.UserService.GetPartnerPreferences:output_type -> user.v1.GetPartnerPreferencesResponse
	30, // [30:38] is the sub-list for method output_type
	22, // [22:30] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_user_v1_user_proto_init() }
func file_user_v1_user_proto_init() {
	if File_user_v1_user_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_v1_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_v1_user_proto_goTypes,
		DependencyIndexes: file_user_v1_user_proto_depIdxs,
		MessageInfos:      file_user_v1_user_proto_msgTypes,
	}.Build()
	File_user_v1_user_proto = out.File
	file_user_v1_user_proto_rawDesc = nil
	file_user_v1_user_proto_goTypes = nil
	file_user_v1_user_proto_depIdxs = nil
}
